name: Docker CI

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-node:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get date
        if: github.event_name != 'pull_request'
        id: date
        run: |
          echo "DATE=$(date +'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | head -c 7)" >> $GITHUB_ENV

      - name: Get branch name
        if: github.event_name != 'pull_request'
        id: branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ -z "$BRANCH_NAME" ]]; then
            BRANCH_NAME="${{ github.ref }}"
            BRANCH_NAME="${BRANCH_NAME#refs/heads/}"
          fi
          BRANCH_NAME=$(echo $BRANCH_NAME | tr / -)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Set release code
        if: github.event_name != 'pull_request'
        id: releasecode
        run: |
          VERSION=$(grep APP_VERSION= .env | cut -d '=' -f2)
          RELEASE=$BRANCH_NAME-$DATE
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "APP_ENV=prod">> $GITHUB_ENV
          echo "APP_BUILD=latest">> $GITHUB_ENV
          echo "set APP_ENV to $APP_ENV"

      - name: Setting CONTAINER_PROJECT_NAME
        if: github.event_name != 'pull_request'
        run: |
          NAME=$(grep CONTAINER_PROJECT_NAME= .env | cut -d '=' -f2)
          echo "CONTAINER_PROJECT_NAME=$NAME" >> $GITHUB_ENV

      - name: Setting CONTAINER_REGISTRY_BASE
        if: github.event_name != 'pull_request'
        run: |
          NAME=$(grep CONTAINER_REGISTRY_BASE= .env | cut -d '=' -f2)
          echo "CONTAINER_REGISTRY_BASE=$NAME" >> $GITHUB_ENV

      - name: Set full container name
        if: github.event_name != 'pull_request'
        run: echo "CONTAINER_NAME=${{ env.CONTAINER_REGISTRY_BASE }}/${{ env.CONTAINER_PROJECT_NAME }}" >> $GITHUB_ENV

      - name: Setting tags
        if: github.event_name != 'pull_request'
        run: |
          echo "TAG_RELEASE=${{ env.CONTAINER_NAME }}:${{ env.RELEASE}}" >> $GITHUB_ENV
          echo "TAG_LATEST=${{ env.CONTAINER_NAME }}:latest" >> $GITHUB_ENV
          echo "TAG_LATEST_BRANCH=${{ env.CONTAINER_NAME }}:${{ env.BRANCH_NAME }}-latest" >> $GITHUB_ENV
          echo "TAG_ALL=${{ env.CONTAINER_NAME }}:cache-all" >> $GITHUB_ENV
          echo "TAG_DOTNETTEST=${{ env.CONTAINER_NAME }}:cache-dotnettest" >> $GITHUB_ENV
          echo "TAG_FRONTENDTEST=${{ env.CONTAINER_NAME }}:cache-frontendtest" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build all stages
        uses: docker/bake-action@v3
        with:
          push: false
          load: true
          files: docker-compose.deploy.yaml
          set: |
           *.cache-from=type=gha,scope=kiss-frontend
           all.cache-to=type=gha,mode=max,scope=kiss-frontend

      # - name: Expose GitHub Runtime
      #   uses: crazy-max/ghaction-github-runtime@v2

      # - name: build all
      #   run: docker buildx build . --load --file Kiss.Bff/Dockerfile --target all --load --cache-from type=gha,scope=kiss-frontend --cache-to type=gha,scope=kiss-frontend,mode=max

      # - name: build dotnettest
      #   run: docker buildx build . --file Kiss.Bff/Dockerfile --target dotnettest --load --tag dotnettest --cache-from type=gha,scope=kiss-frontend

      # - name: run dotnettest
      #   run: docker run --rm dotnettest

      # - name: build frontendtest
      #   run: docker buildx build . --file Kiss.Bff/Dockerfile --target frontendtest --load --tag frontendtest --cache-from type=gha,scope=kiss-frontend

      # - name: run frontendtest
      #   run: docker run --rm frontendtest

      # - name: build frontendtest
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: Kiss.Bff/Dockerfile
      #     push: false
      #     load: true
      #     tags: ${{ env.TAG_FRONTENDTEST }}
      #     target: frontendtest

      # - name: run tests
      #   run: docker run -v /testresults:/testresults ${{ env.TAG_FRONTENDTEST }}

      # - name: run tests
      #   run: docker run -v /testresults:/testresults ${{ env.TAG_DOTNETTEST }}

      # - name: dotnet test report
      #   uses: dorny/test-reporter@v1
      #   if: success() || failure() # run this step even if previous step failed
      #   with:
      #     name: dotnet tests # Name of the check run which will be created
      #     path: /testresults/*.trx # Path to test results
      #     reporter: dotnet-trx # Format of test results

      # - name: npm test report
      #   uses: dorny/test-reporter@v1
      #   if: success() || failure() # run this step even if previous step failed
      #   with:
      #     name: npm tests # Name of the check run which will be created
      #     path: /testresults/*.xml # Path to test results
      #     reporter: jest-junit # Format of test results

      # - name: push image
      #   uses: docker/build-push-action@v4
      #   if: github.event_name != 'pull_request'
      #   with:
      #     context: .
      #     file: Kiss.Bff/Dockerfile
      #     push: true
      #     tags: ${{ env.TAG_RELEASE }},${{ env.TAG_LATEST }},${{ env.TAG_LATEST_BRANCH }}
      #     target: final
